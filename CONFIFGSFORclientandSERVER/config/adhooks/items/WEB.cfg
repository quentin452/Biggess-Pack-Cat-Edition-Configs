# Configuration file

CraftingRecipe {

    main {
        # Amount of output units. [range: 1 ~ 64, default: 1]
        I:amount=1

        # Recipe components list.
        # Components should be represented by its ids.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
        # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
        # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
        # Use '*' char as meta value to specify all possible values.
        # Also you may use just ore dictionary name as full id.
        #  [default: [string]]
        S:components <
            string
         >

        # Output unit id.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
        # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
        # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
        # Use '*' char as meta value to specify all possible values.
        # Also you may use just ore dictionary name as full id.
        #  [default: web]
        S:output=web

        # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
        # Where 'n' - number of recipe component (from 1 to 9).
        # Zero value (0) is for empty slot.
        # If pattern is empty, then recipe will be treated as shapeless. [default: 101 010 101]
        S:pattern=101 010 101
    }

    reserve {
        # Amount of output units. [range: 1 ~ 64, default: 1]
        I:amount=1

        # Recipe components list.
        # Components should be represented by its ids.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
        # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
        # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
        # Use '*' char as meta value to specify all possible values.
        # Also you may use just ore dictionary name as full id.
        #  [default: [string]]
        S:components <
            string
         >

        # Output unit id.
        # Id is a basic unit (block or item) identifier in <modId:unitName:meta> format.
        # ModId can be omitted for vanilla items. Meta can be omitted too if it equals 0.
        # UnitName must be lowercase, words separated by '_', words order - from private to common (example: black_iron_ore).
        # Unit name will be automatically converted to ore dictionary name with reverse word order (example: oreIronBlack).
        # Use '*' char as meta value to specify all possible values.
        # Also you may use just ore dictionary name as full id.
        #  [default: web]
        S:output=web

        # Shaped recipe pattern in format <nn nn> or <nnn nnn nnn>.
        # Where 'n' - number of recipe component (from 1 to 9).
        # Zero value (0) is for empty slot.
        # If pattern is empty, then recipe will be treated as shapeless. [default: 101 010 101]
        S:pattern=101 010 101
    }

}


