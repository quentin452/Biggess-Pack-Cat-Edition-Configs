# Configuration file

"armour list" {
    # This will register items under a certain 'Design' calculating the variables itself.
    #  Each entry has it's own line:
    # Order itemid|Design|WeightGroup|WeightModifier 
    # The WeightModifier alters the weight for heavier or lighter materials keep it at 1.0 unless you have a special material (like mithril and adamamantium)
    # Designs can be any that are registered: MineFantasy designs are 'clothing', 'leather', 'mail', 'default'(that's just basic metal armour), and 'plate'
    # WeightGroup refers to whether it is light medium or heavy armour 
    # EXAMPLE (This is what vanilla gold is registered under) 
    # minecraft:golden_helmet|default|medium|2.0 
    # minecraft:golden_chestplate|default|medium|2.0 
    # minecraft:golden_leggings|default|medium|2.0 
    # minecraft:golden_boots|default|medium|2.0 
    # The 2.0 means it is 2x heavier than other vanilla armours 
    # This does not override existing MF armours 
    # 
    S:"Auto-Armour Registry" <
     >
}


farming {
    # This Registers Hoe items to an efficiency level: (It uses the same variable as efficiency, you may need to find that out first, by default: it should be able to guess it:
    # Order itemid|efficicncy 
    # Efficicney is a variable that goes into play with the failure chance, higher efficicnecy has easier tiling
    # 
    S:"Hoe Registry" <
     >
}


tools {
    # This Registers items to a tool type and efficiency (such as hammer, hvyHammer, knife, saw, etc):
    # Order itemid|efficiency|tier|tooltype 
    # tooltype can be hammer, hvyHammer, knife, shears, needle, spoon, mallet, saw, spanner 
    # efficiency is the measure of how fast it works (similar to dig speed)
    S:"Crafter Registry" <
     >
}


"weapon register" {
    # [Experimental] This registers weapons for the damage variable mechanics implemented by option. 
    # Though mod-added armours have absolutely no support, and never can without being specifically coded to 
    # MineFantasy armours will take these variables and function differently on the values. But weapon items can 
    # be added to the list: Put each entry on it's own line set out like this: 
    # id|cutting|pierce|blunt 
    # id is the item id as a string (you need to find it out yourself), cutting and blunt are the ratio. 
    # EXAMPLE (for example... making a stick to piercing damage) 
    # minecraft:stick|0|1.0|0 
    # The difference between the ratio is what determines damage 1|0 means 100% cutting damage, 3|1 means it's 3 cutting to 1 blunt (or 75%, 25%). use whatever numbers you need to make the ratio.
    S:"Custom Damage Ratios" <
     >

    # Similar method to 'Custom Damage Ratios' only with entities, This is for registering things like arrows, same format only with the entity registry name (usually modid:name)
    S:"Custom Entity Damage Ratios" <
     >
}


