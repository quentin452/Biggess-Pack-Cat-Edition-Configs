# Configuration file

eu {
    # The maximum output in EU/t. (Only takes effect if it is lower than the output of the current tier.) [range: 0 ~ 2147483647, default: 2147483647]
    I:euOutputLimit=2147483647

    # The amount of EU the EU Box can store. [range: 0 ~ 2147483647, default: 10000]
    I:euStorage=10000

    # The tier of the EU box. 1 = LV, 2 = MV, 3 = HV, 4 = EV [range: 1 ~ 4, default: 1]
    I:euTier=1
}


general {
    # If ChatFuel listens to IRC chat. [default: false]
    B:enabledIRC=false

    # If ChatFuel listens to Minecraft ingame chat. [default: true]
    B:enabledMC=true

    # Generate files containing the current energy values. [default: false]
    B:fileOutput=false

    # The time in milliseconds the ChatHandler thread sleeps inbetween checking its queue. [range: 0 ~ 2147483647, default: 1000]
    I:sleep=1000
}


irc {
    # The channel ChatFuel should join. (including the #) [default: ]
    S:ircChannel=

    #  [default: ]
    S:ircNickname=

    #  [default: ]
    S:ircPassword=

    #  [range: 0 ~ 65535, default: 6667]
    I:ircPort=6667

    # The IRC server ChatFuel should connect to. [default: ]
    S:ircServer=
}


##########################################################################################################
# patterns
#--------------------------------------------------------------------------------------------------------#
# Patterns are in the following format:
# <identifier>;<value>;<username>;<regex>
# The following strings are valid identifiers: "rf", "eu"
# For rf and eu the value is the amount (floatingpoint value)
# The username is case-insensitive; use * for everybody.
# The chat messages will be tested against the regex (which will be compiled into java.util.regex.Pattern). The regex may contain a semicolon.
# If a regex is mentioned multiple times in a message then the action occurs multiple times.
# Example: "rf;200;*;power" gives 200 RF every time "power" is mentioned in a chat message.
##########################################################################################################

patterns {
    #  [default: ]
    S:patterns <
     >
}


rf {
    # The maximum output in RF/t. [range: 0 ~ 2147483647, default: 20]
    I:rfOutputLimit=20

    # The amount of RF the RF Box can store. [range: 0 ~ 2147483647, default: 10000]
    I:rfStorage=10000
}


